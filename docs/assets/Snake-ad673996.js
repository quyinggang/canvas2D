import{g as b,a as g}from"./index-4243d227.js";import{_,r as I,o as P,a as E,b as F,c as R}from"./index-36847955.js";const L={__name:"Snake",setup(B){const S=I(null);return P(()=>{const x=S.value,d={eyeColor:"#000",eyeRatio:.25,snakeSize:8,minFoodSize:4,maxFoodSize:8,minSnakeLen:5,maxSnakeLen:100,snakeSpeed:2,pathInterval:4,maxPathCount:130,snakeGrowThreshold:6,rotateSpeed:.025*180,foodCount:100,eatRange:14};class M{constructor(t){this.domElement=document.createElement("canvas"),this.ctx=this.domElement.getContext("2d"),this.setCanvasSize(t),this.setCanvasAttrs(),this.ctx.scale(t.pixel,t.pixel)}setCanvasSize(t){const{width:e,height:n,pixel:s}=t;this.width=e*s,this.height=n*s,this.styleWidth=e,this.styleHeight=n}setCanvasAttrs(){const{width:t,height:e,styleWidth:n,styleHeight:s,domElement:o}=this;o.width=t,o.height=e,o.style.cssText=`width:${n}px;height:${s}px;`}}class v{constructor(t){this.snake=[],this.path=[],this.color=t.color,this.radius=t.radius,this.speed=d.snakeSpeed,this.power=0,this.cross=1;const e=Math.random()*Math.PI*2,n={x:Math.cos(e),y:Math.sin(e)};this.angle=e,this.direction=n,this.targetDirection=n,this.rotateSpeed=d.rotateSpeed,this.initSnakeLen=d.minSnakeLen,this.createSnakeShape(t)}createSnakeShape(t){const e=[],n=[],s={x:t.x,y:t.y},{initSnakeLen:o,direction:a,speed:i}=this,r=d.pathInterval,h=o*r;let y=0;for(let c=0;c<h;c++){const l={x:s.x-a.x*i*c,y:s.y-a.y*i*c};e.push(l),y*r===c&&(n.push(l),y+=1)}this.path=e,this.snake=n}getHead(){return this.snake[0]}getBody(){return this.snake.slice(1)}drawHead(t){const{color:e,radius:n,angle:s}=this,{x:o,y:a}=this.getHead();t.save(),t.fillStyle=e,t.beginPath(),t.arc(o,a,n,0,2*Math.PI),t.fill(),t.fillStyle=d.eyeColor;const i=n*d.eyeRatio,r=n*.4,h=i*2,y=o+Math.cos(s)*r,c=a+Math.sin(s)*r,l=y+h*Math.cos(s+Math.PI/2),u=c+h*Math.sin(s+Math.PI/2),p=y+h*Math.cos(s-Math.PI/2),f=c+h*Math.sin(s-Math.PI/2);t.beginPath(),t.arc(l,u,i,0,2*Math.PI),t.fill(),t.beginPath(),t.arc(p,f,i,0,2*Math.PI),t.fill(),t.restore()}drawBody(t){const{color:e,radius:n}=this,s=this.getBody();t.save(),t.fillStyle=e,s.forEach(o=>{const{x:a,y:i}=o;t.beginPath(),t.arc(a,i,n,0,2*Math.PI),t.fill()}),t.restore()}rotate(){const{direction:t,targetDirection:e,rotateSpeed:n,cross:s}=this,{x:o,y:a}=t,{x:i,y:r}=e;if(o===i&&a===r)return;const h=o*i+a*r,y=Math.acos(h)/Math.PI*180;if(Math.abs(y)<=n)this.direction={...e};else{const c=s*n*Math.PI/180,l=Math.cos(c),u=Math.sin(c),p=[l,u,-u,l],f={x:o*p[0]+a*p[2],y:o*p[1]+a*p[3]};this.direction=f}}rotateTo(t,e){const n=this.direction;this.targetDirection={x:t,y:e},this.cross=e*n.x-t*n.y>=0?1:-1,this.angle=Math.atan2(e,t)}move(){const{speed:t,direction:e,path:n,snake:s}=this,o=this.getHead(),a={x:o.x+e.x*t,y:o.y+e.y*t};n.unshift(a);const i=d.pathInterval,r=n.length-1;for(let h=s.length-1;h>=0;h--){const y=Math.min(h*i,r),c=n[y],l=s[h];l.x=c.x,l.y=c.y}n.length>d.maxPathCount&&n.pop()}addBody(){const{power:t,snake:e,initSnakeLen:n}=this,{maxSnakeLen:s,snakeGrowThreshold:o}=d,a=Math.trunc(t/o);if(a<=0)return;const r=Math.min(a+n,s)-e.length;for(let h=0;h<r;h++)e.push({x:0,y:0})}eat(t){this.power+=t,this.addBody()}render(t){this.drawBody(t),this.drawHead(t)}}class w{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius,this.color=t.color,this.power=Math.round(t.radius/d.minFoodSize),this.visible=!0}render(t){const{x:e,y:n,radius:s,color:o}=this,a=t.createRadialGradient(e,n,0,e,n,s);a.addColorStop(0,o),a.addColorStop(.3,o),a.addColorStop(1,"transparent"),t.save(),t.fillStyle=a,t.beginPath(),t.arc(e,n,s,0,2*Math.PI),t.fill(),t.closePath(),t.restore()}}class C{constructor(t){this.initState(t),this.createCanvas(),this.createFoods(),this.createSnake(),this.createController(),this.mountCanvas()}initState(t){const e=t.container;if(!(e instanceof HTMLElement))throw new Error("container must be a html element");this.container=e,this.raf=null,this.foods=[]}createCanvas(){const t=this.container.getBoundingClientRect(),{width:e,height:n}=t;this.canvas=new M({width:e,height:n,pixel:window.devicePixelRatio}),this.clientCenter={x:e*.5,y:n*.5},this.boundingClient=t}createSnake(){const t=this.clientCenter,e=new v({x:t.x,y:t.y,color:"#c0392b",radius:d.snakeSize});this.snake=e}createFoods(){const{width:t,height:e}=this.canvas,{minFoodSize:n,maxFoodSize:s,foodCount:o}=d,a=[],i=10;for(let r=0;r<o;r++){const h=g(i,t-i),y=g(i,e-i),c=g(n,s),l=b();a.push(new w({x:h,y,color:l,radius:Math.round(c)}))}this.foods=a}mountCanvas(){this.container.appendChild(this.canvas.domElement)}createController(){const{snake:t,clientCenter:e,boundingClient:{left:n,top:s}}=this,o=a=>{const i=a.x-n-e.x,r=a.y-s-e.y,h=Math.sqrt(Math.pow(i,2)+Math.pow(r,2));t.rotateTo(i/h,r/h)};this.container.addEventListener("mousemove",o)}checkFoodVisible(){const{snake:t,foods:e}=this,n=d.eatRange,s=t.getHead();for(const o of e)if(o.visible){const a={x:s.x-o.x,y:s.y-o.y},i=Math.pow(a.x,2)+Math.pow(a.y,2);Math.sqrt(i)<n&&(o.visible=!1,t.eat(o.power))}}renderFrame(){const{snake:t,clientCenter:e,canvas:{ctx:n,width:s,height:o},foods:a}=this,i=t.getHead();n.clearRect(0,0,s,o),n.save(),n.translate(e.x-i.x,e.y-i.y),t.rotate(),t.move(),this.checkFoodVisible(),a.forEach(r=>r.visible&&r.render(n)),t.render(n),n.restore()}start(){this.renderFrame(),this.raf=window.requestAnimationFrame(this.start.bind(this))}destroy(){this.container=null,window.cancelAnimationFrame(this.raf)}}const k=new C({container:x});k.start(),E(()=>k.destroy())}),(x,d)=>(F(),R("div",{class:"box",ref_key:"boxElementRef",ref:S},null,512))}},T=_(L,[["__scopeId","data-v-951d45db"]]);export{T as default};
